# values-ocp.yaml RUN:
# NS=tetragon-system
# START_UID=$(oc get ns $NS -o jsonpath='{.metadata.annotations.openshift\.io/sa\.scc\.uid-range}'); START_UID=${START_UID%%/*}
# helm upgrade --install tetragon isovalent/tetragon -n $NS \
#  -f tools/FIX_SCC_Grafana.yaml \
#  --set-string grafana.adminPassword=tetragon \
#  --set-string grafana.podSecurityContext.fsGroup=$START_UID \
#  --set-string grafana.securityContext.runAsUser=$START_UID \
#  --set-string grafana.securityContext.runAsGroup=$START_UID \
#  --set-string kube-state-metrics.podSecurityContext.fsGroup=$START_UID \
# --set-string kube-state-metrics.securityContext.runAsUser=$START_UID \
#  --set-string kube-state-metrics.securityContext.runAsGroup=$START_UID \
#  --set-string integratedGrafana.prometheus.podSecurityContext.fsGroup=$START_UID \
#  --set-string integratedGrafana.prometheus.securityContext.runAsUser=$START_UID \
#  --set-string integratedGrafana.prometheus.securityContext.runAsGroup=$START_UID

integratedGrafana:
  enabled: true

grafana:
  adminPassword: tetragon
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      memory: 256Mi
  podAnnotations: {}
  podSecurityContext:
    fsGroup: <START_UID>        # e.g. 1000780000
  securityContext:
    runAsNonRoot: true
    runAsUser: <START_UID>
    runAsGroup: <START_UID>

kube-state-metrics:
  podAnnotations: {}
  podSecurityContext:
    fsGroup: <START_UID>
  securityContext:
    runAsNonRoot: true
    runAsUser: <START_UID>
    runAsGroup: <START_UID>

integratedGrafana:
  prometheus:
    podAnnotations: {}
    podSecurityContext:
      fsGroup: <START_UID>
    securityContext:
      runAsNonRoot: true
      runAsUser: <START_UID>
      runAsGroup: <START_UID>
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        memory: 1Gi